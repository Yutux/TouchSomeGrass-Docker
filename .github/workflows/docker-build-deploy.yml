name: CI/CD Pipeline with Render Auto-Deploy

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
  CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
  CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
  CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build DirectoryService (Eureka)
        working-directory: ./DirectoryService
        run: |
          if [ -f "mvnw" ]; then
            chmod +x mvnw
            ./mvnw clean package -DskipTests
          elif [ -f "pom.xml" ]; then
            mvn clean package -DskipTests
          fi

      - name: Build jwtAuthService
        working-directory: ./jwtAuthService
        run: |
          if [ -f "mvnw" ]; then
            chmod +x mvnw
            ./mvnw clean package -DskipTests
          elif [ -f "pom.xml" ]; then
            mvn clean package -DskipTests
          fi

      - name: Build cloudGateway
        working-directory: ./cloudGateway
        run: |
          if [ -f "mvnw" ]; then
            chmod +x mvnw
            ./mvnw clean package -DskipTests
          elif [ -f "pom.xml" ]; then
            mvn clean package -DskipTests
          fi

  sonarqube-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: false
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    strategy:
      matrix:
        service:
          - name: eureka-server
            context: ./DirectoryService
            dockerfile: ./DirectoryService/Dockerfile
          - name: auth-service
            context: ./jwtAuthService
            dockerfile: ./jwtAuthService/Dockerfile
          - name: gateway-service
            context: ./cloudGateway
            dockerfile: ./cloudGateway/Dockerfile
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build ${{ matrix.service.name }}
        working-directory: ${{ matrix.service.context }}
        run: |
          if [ -f "mvnw" ]; then
            chmod +x mvnw
            ./mvnw clean package -DskipTests
          elif [ -f "pom.xml" ]; then
            mvn clean package -DskipTests
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true
          build-args: |
            GOOGLE_MAPS_API_KEY=${{ env.GOOGLE_MAPS_API_KEY }}
            CLOUDINARY_CLOUD_NAME=${{ env.CLOUDINARY_CLOUD_NAME }}
            CLOUDINARY_API_KEY=${{ env.CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET=${{ env.CLOUDINARY_API_SECRET }}

  deploy-to-render:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy Eureka Server to Render
        run: |
          echo "🚀 Deploying Eureka Server to Render..."
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${{ secrets.RENDER_EUREKA_DEPLOY_HOOK }}")
          if [ "$response" = "200" ] || [ "$response" = "201" ]; then
            echo "✅ Eureka Server deployment triggered successfully"
          else
            echo "⚠️ Eureka Server deployment returned status: $response"
          fi

      - name: Wait before next deployment
        run: sleep 10

      - name: Deploy Auth Service to Render
        run: |
          echo "🚀 Deploying Auth Service to Render..."
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${{ secrets.RENDER_AUTH_DEPLOY_HOOK }}")
          if [ "$response" = "200" ] || [ "$response" = "201" ]; then
            echo "✅ Auth Service deployment triggered successfully"
          else
            echo "⚠️ Auth Service deployment returned status: $response"
          fi

      - name: Wait before next deployment
        run: sleep 10

      - name: Deploy Gateway Service to Render
        run: |
          echo "🚀 Deploying Gateway Service to Render..."
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${{ secrets.RENDER_GATEWAY_DEPLOY_HOOK }}")
          if [ "$response" = "200" ] || [ "$response" = "201" ]; then
            echo "✅ Gateway Service deployment triggered successfully"
          else
            echo "⚠️ Gateway deployment returned status: $response"
          fi

      - name: Deployment Summary
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "📦 Docker Images:"
          echo "  - ${{ secrets.DOCKER_USERNAME }}/eureka-server:latest"
          echo "  - ${{ secrets.DOCKER_USERNAME }}/auth-service:latest"
          echo "  - ${{ secrets.DOCKER_USERNAME }}/gateway-service:latest"
          echo ""
          echo "🌐 Render Deployments:"
          echo "  - Eureka Server: Triggered ✅"
          echo "  - Auth Service: Triggered ✅"
          echo "  - Gateway Service: Triggered ✅"
          echo ""
          echo "⏱️  Services will be live in 2-3 minutes"
          echo "🔗 Check Render Dashboard for deployment status"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
