pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
        SONARQUBE_SERVER = 'SonarQube'
        SONAR_TOKEN = credentials('sonarqube-token')
        MYSQL_ROOT_PASSWORD = credentials('mysql-root-password')
        MAVEN_OPTS = '-Dmaven.repo.local=.m2/repository'
    }
    
    tools {
        maven 'Maven-3.9'
        jdk 'JDK-17'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                    env.BUILD_TAG_NAME = "${env.BRANCH_NAME}-${env.GIT_COMMIT_SHORT}"
                }
            }
        }
        
        stage('Build Services') {
            parallel {
                stage('Build Eureka Server') {
                    steps {
                        dir('DirectoryService') {
                            script {
                                if (fileExists('mvnw')) {
                                    sh 'chmod +x mvnw'
                                    sh './mvnw clean package -DskipTests'
                                } else {
                                    sh 'mvn clean package -DskipTests'
                                }
                            }
                        }
                    }
                }
                
                stage('Build Auth Service') {
                    steps {
                        dir('jwtAuthService') {
                            script {
                                if (fileExists('mvnw')) {
                                    sh 'chmod +x mvnw'
                                    sh './mvnw clean package -DskipTests'
                                } else {
                                    sh 'mvn clean package -DskipTests'
                                }
                            }
                        }
                    }
                }
                
                stage('Build Gateway Service') {
                    steps {
                        dir('cloudGateway') {
                            script {
                                if (fileExists('mvnw')) {
                                    sh 'chmod +x mvnw'
                                    sh './mvnw clean package -DskipTests'
                                } else {
                                    sh 'mvn clean package -DskipTests'
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Run Tests') {
            parallel {
                stage('Test Eureka Server') {
                    steps {
                        dir('DirectoryService') {
                            script {
                                if (fileExists('mvnw')) {
                                    sh 'chmod +x mvnw'
                                    sh './mvnw test'
                                } else {
                                    sh 'mvn test'
                                }
                            }
                        }
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'DirectoryService/target/surefire-reports/*.xml'
                        }
                    }
                }
                
                stage('Test Auth Service') {
                    steps {
                        dir('jwtAuthService') {
                            script {
                                if (fileExists('mvnw')) {
                                    sh 'chmod +x mvnw'
                                    sh './mvnw test'
                                } else {
                                    sh 'mvn test'
                                }
                            }
                        }
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'jwtAuthService/target/surefire-reports/*.xml'
                        }
                    }
                }
                
                stage('Test Gateway Service') {
                    steps {
                        dir('cloudGateway') {
                            script {
                                if (fileExists('mvnw')) {
                                    sh 'chmod +x mvnw'
                                    sh './mvnw test'
                                } else {
                                    sh 'mvn test'
                                }
                            }
                        }
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'cloudGateway/target/surefire-reports/*.xml'
                        }
                    }
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        parallel(
                            'Eureka Server Analysis': {
                                dir('DirectoryService') {
                                    sh """
                                        mvn sonar:sonar \
                                            -Dsonar.projectKey=eureka-server \
                                            -Dsonar.projectName='Eureka Server' \
                                            -Dsonar.host.url=${SONARQUBE_ENV_URL} \
                                            -Dsonar.token=${SONAR_TOKEN}
                                    """
                                }
                            },
                            'Auth Service Analysis': {
                                dir('jwtAuthService') {
                                    sh """
                                        mvn sonar:sonar \
                                            -Dsonar.projectKey=auth-service \
                                            -Dsonar.projectName='JWT Auth Service' \
                                            -Dsonar.host.url=${SONARQUBE_ENV_URL} \
                                            -Dsonar.token=${SONAR_TOKEN}
                                    """
                                }
                            },
                            'Gateway Service Analysis': {
                                dir('cloudGateway') {
                                    sh """
                                        mvn sonar:sonar \
                                            -Dsonar.projectKey=gateway-service \
                                            -Dsonar.projectName='Cloud Gateway' \
                                            -Dsonar.host.url=${SONARQUBE_ENV_URL} \
                                            -Dsonar.token=${SONAR_TOKEN}
                                    """
                                }
                            }
                        )
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Build Docker Images') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            parallel {
                stage('Build Eureka Docker Image') {
                    steps {
                        dir('DirectoryService') {
                            script {
                                docker.build("${DOCKER_REGISTRY}/${env.DOCKER_USERNAME}/eureka-server:${env.BUILD_TAG_NAME}")
                                docker.build("${DOCKER_REGISTRY}/${env.DOCKER_USERNAME}/eureka-server:latest")
                            }
                        }
                    }
                }
                
                stage('Build Auth Docker Image') {
                    steps {
                        dir('jwtAuthService') {
                            script {
                                docker.build("${DOCKER_REGISTRY}/${env.DOCKER_USERNAME}/auth-service:${env.BUILD_TAG_NAME}")
                                docker.build("${DOCKER_REGISTRY}/${env.DOCKER_USERNAME}/auth-service:latest")
                            }
                        }
                    }
                }
                
                stage('Build Gateway Docker Image') {
                    steps {
                        dir('cloudGateway') {
                            script {
                                docker.build("${DOCKER_REGISTRY}/${env.DOCKER_USERNAME}/gateway-service:${env.BUILD_TAG_NAME}")
                                docker.build("${DOCKER_REGISTRY}/${env.DOCKER_USERNAME}/gateway-service:latest")
                            }
                        }
                    }
                }
            }
        }
        
        stage('Push Docker Images') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                script {
                    docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_CREDENTIALS_ID) {
                        // Push Eureka Server
                        docker.image("${DOCKER_REGISTRY}/${env.DOCKER_USERNAME}/eureka-server:${env.BUILD_TAG_NAME}").push()
                        docker.image("${DOCKER_REGISTRY}/${env.DOCKER_USERNAME}/eureka-server:latest").push()
                        
                        // Push Auth Service
                        docker.image("${DOCKER_REGISTRY}/${env.DOCKER_USERNAME}/auth-service:${env.BUILD_TAG_NAME}").push()
                        docker.image("${DOCKER_REGISTRY}/${env.DOCKER_USERNAME}/auth-service:latest").push()
                        
                        // Push Gateway Service
                        docker.image("${DOCKER_REGISTRY}/${env.DOCKER_USERNAME}/gateway-service:${env.BUILD_TAG_NAME}").push()
                        docker.image("${DOCKER_REGISTRY}/${env.DOCKER_USERNAME}/gateway-service:latest").push()
                    }
                }
            }
        }
        
        stage('Deploy to Environment') {
            when {
                branch 'main'
            }
            steps {
                script {
                    sh '''
                        cat > docker-compose.prod.yml << 'EOF'
version: '3.8'
services:
  mysql-container:
    image: mysql:5.7
    container_name: mysql-container
    environment:
      MYSQL_DATABASE: db_jwtsecure
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  eureka-server:
    image: ${DOCKER_USERNAME}/eureka-server:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  auth-service:
    image: ${DOCKER_USERNAME}/auth-service:latest
    container_name: authentication-service
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      mysql-container:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    
  gateway-service:
    image: ${DOCKER_USERNAME}/gateway-service:latest
    container_name: gateway-service
    ports:
      - "8088:8088"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    
networks:
  app-network:
    driver: bridge
    
volumes:
  mysql-data:
EOF
                    '''
                    
                    // Déploiement local ou distant
                    sh 'docker-compose -f docker-compose.prod.yml pull'
                    sh 'docker-compose -f docker-compose.prod.yml up -d'
                }
            }
        }
    }
    
    post {
        always {
            // Nettoyage
            cleanWs()
        }
        success {
            echo '✅ Pipeline executed successfully!'
            // Notifications (Slack, Email, etc.)
        }
        failure {
            echo '❌ Pipeline failed!'
            // Notifications d'erreur
        }
    }
}
